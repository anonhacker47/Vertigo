"""create vertigo  table

Revision ID: e232f3f495c9
Revises: 
Create Date: 2024-02-28 12:01:43.982948

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'e232f3f495c9'
down_revision = None
branch_labels = None
depends_on = None


def upgrade(engine_name: str) -> None:
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name: str) -> None:
    globals()["downgrade_%s" % engine_name]()





def upgrade_() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password_hash', sa.String(length=128), nullable=True),
    sa.Column('first_seen', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('followers',
    sa.Column('follower_id', sa.Integer(), nullable=True),
    sa.Column('followed_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['followed_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['follower_id'], ['users.id'], )
    )
    op.create_table('series',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=280), nullable=False),
    sa.Column('publisher', sa.String(length=280), nullable=True),
    sa.Column('genre', sa.String(length=280), nullable=True),
    sa.Column('main_char', sa.String(length=280), nullable=True),
    sa.Column('writer', sa.String(length=280), nullable=True),
    sa.Column('artist', sa.String(length=280), nullable=True),
    sa.Column('editor', sa.String(length=280), nullable=True),
    sa.Column('summary', sa.String(length=570), nullable=True),
    sa.Column('series_format', sa.String(length=100), nullable=True),
    sa.Column('books_count', sa.Integer(), nullable=True),
    sa.Column('read_count', sa.Integer(), nullable=True),
    sa.Column('have_count', sa.Integer(), nullable=True),
    sa.Column('dominant_color', sa.String(length=280), nullable=True),
    sa.Column('slug', sa.String(length=280), nullable=True),
    sa.Column('thumbnail', sa.String(length=280), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('series', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_series_timestamp'), ['timestamp'], unique=False)
        batch_op.create_index(batch_op.f('ix_series_user_id'), ['user_id'], unique=False)

    op.create_table('tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('access_token', sa.String(length=64), nullable=False),
    sa.Column('access_expiration', sa.DateTime(), nullable=False),
    sa.Column('refresh_token', sa.String(length=64), nullable=False),
    sa.Column('refresh_expiration', sa.DateTime(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('tokens', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tokens_access_token'), ['access_token'], unique=False)
        batch_op.create_index(batch_op.f('ix_tokens_refresh_token'), ['refresh_token'], unique=False)
        batch_op.create_index(batch_op.f('ix_tokens_user_id'), ['user_id'], unique=False)

    op.create_table('issue',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=280), nullable=False),
    sa.Column('slug', sa.String(length=280), nullable=True),
    sa.Column('read_whole', sa.Integer(), nullable=True),
    sa.Column('have_whole', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('series_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['series_id'], ['series.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('issue', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_issue_series_id'), ['series_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_issue_timestamp'), ['timestamp'], unique=False)
        batch_op.create_index(batch_op.f('ix_issue_user_id'), ['user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade_() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('issue', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_issue_user_id'))
        batch_op.drop_index(batch_op.f('ix_issue_timestamp'))
        batch_op.drop_index(batch_op.f('ix_issue_series_id'))

    op.drop_table('issue')
    with op.batch_alter_table('tokens', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tokens_user_id'))
        batch_op.drop_index(batch_op.f('ix_tokens_refresh_token'))
        batch_op.drop_index(batch_op.f('ix_tokens_access_token'))

    op.drop_table('tokens')
    with op.batch_alter_table('series', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_series_user_id'))
        batch_op.drop_index(batch_op.f('ix_series_timestamp'))

    op.drop_table('series')
    op.drop_table('followers')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    # ### end Alembic commands ###

